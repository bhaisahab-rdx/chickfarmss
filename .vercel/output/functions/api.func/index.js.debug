/**
 * ChickFarms Consolidated API Endpoint
 * Debug version with enhanced logging for spin functionality
 */

// Imports and setup code remain the same as the standard version

// Add special debugging functions for spin troubleshooting
function handleDebugSpin(req, res) {
  console.log('DEBUG SPIN ENDPOINT CALLED');

  // Check for spin-related routes in routing configuration
  const routePatterns = [
    { pattern: '/api/spin/status', matches: '/api/spin/status'.match('/api/spin/status') !== null },
    { pattern: '/api/spin/(.*)', matches: '/api/spin/status'.match('/api/spin/(.*)') !== null },
    { pattern: '/api/spin/*', matches: '/api/spin/status'.match('/api/spin/*') !== null },
  ];

  // Get detailed request information
  const requestInfo = {
    method: req.method,
    url: req.url,
    headers: req.headers,
    cookies: parseCookies(req.headers.cookie || ''),
    path: req.url.split('?')[0],
  };

  // Get environment variables that might affect spin functionality
  const environmentInfo = {
    NODE_ENV: process.env.NODE_ENV,
    DATABASE_URL: process.env.DATABASE_URL ? 'Set (value hidden)' : 'Not set',
    SESSION_SECRET: process.env.SESSION_SECRET ? 'Set (value hidden)' : 'Not set',
  };

  // Check database connection if possible
  let databaseStatus = 'Not tested';
  if (pool) {
    try {
      const client = await pool.connect();
      await client.query('SELECT NOW()');
      client.release();
      databaseStatus = 'Connection successful';
    } catch (err) {
      databaseStatus = `Connection failed: ${err.message}`;
    }
  }

  // Return detailed debug information
  res.status(200).json({
    message: 'Spin functionality debug information',
    timestamp: new Date().toISOString(),
    routePatterns,
    requestInfo,
    environmentInfo,
    databaseStatus,
    apiEndpoints: {
      spin: [
        '/api/spin/status',
        '/api/spin/spin',
        '/api/spin/claim-extra'
      ]
    },
    help: 'If spin endpoints are returning 404, check route patterns in .vercel/output/config.json'
  });
}

// Enhance the main handler to include special logging for spin endpoints
function handler(req, res) {
  const url = req.url;
  const pathname = url.split('?')[0];

  // Special debug logging for spin routes
  if (pathname.startsWith('/api/spin/')) {
    console.log(`[SPIN DEBUG] Request received for spin endpoint: ${pathname}`);
    console.log(`[SPIN DEBUG] Request method: ${req.method}`);
    console.log(`[SPIN DEBUG] Request headers:`, req.headers);
    
    // Check authentication info
    const cookies = parseCookies(req.headers.cookie || '');
    if (cookies.session) {
      console.log(`[SPIN DEBUG] Session cookie found: ${cookies.session.substring(0, 10)}...`);
      
      try {
        const userId = validateSessionToken(cookies.session);
        console.log(`[SPIN DEBUG] Session validation result: User ID ${userId || 'invalid'}`);
      } catch (err) {
        console.log(`[SPIN DEBUG] Session validation error: ${err.message}`);
      }
    } else {
      console.log(`[SPIN DEBUG] No session cookie found`);
    }
  }

  // Special debug endpoint
  if (pathname === '/api/debug-spin') {
    return handleDebugSpin(req, res);
  }

  // Continue with normal request processing
  // ... rest of the handler remains the same
}